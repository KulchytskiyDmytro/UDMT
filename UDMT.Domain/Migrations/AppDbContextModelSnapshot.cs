// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UDMT.Domain.Context;

#nullable disable

namespace UDMT.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharClassId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubclassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharClassId");

                    b.HasIndex("RaceId");

                    b.HasIndex("SubclassId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterAttributes");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterSavingThrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("BonusOverride")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterSavingThrows");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BonusOverride")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsProficient")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMagic")
                        .HasColumnType("bit");

                    b.Property<int>("HitDie")
                        .HasColumnType("int");

                    b.Property<bool>("IsHomebrew")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProficencyBonus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CharClasses");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharClassSavingThrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("CharClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharClassId");

                    b.ToTable("CharClassSavingThrows");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharSubclass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GrantsMagic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHomebrew")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharClassId");

                    b.ToTable("CharSubclasses");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.ClassMechanic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHomebrew")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassMechanics");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.ClassSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharClassId")
                        .HasColumnType("int");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("bit");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("CharClassId", "SkillId")
                        .IsUnique();

                    b.ToTable("ClassSkills");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharClassId")
                        .HasColumnType("int");

                    b.Property<int?>("CharSubclassId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassMechanicId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GrantsMagic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHomebrew")
                        .HasColumnType("bit");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharClassId");

                    b.HasIndex("CharSubclassId");

                    b.HasIndex("ClassMechanicId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHomebrew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequireSubrace")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.RaceAttributeBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceAttributeBonuses");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.RaceRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubraceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubraceId");

                    b.HasIndex("RaceId", "SubraceId")
                        .IsUnique()
                        .HasFilter("[SubraceId] IS NOT NULL");

                    b.ToTable("RaceRelations", (string)null);
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Shared.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.Character", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Classes.CharClass", "CharClass")
                        .WithMany()
                        .HasForeignKey("CharClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UDMT.Domain.Entity.Races.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UDMT.Domain.Entity.Classes.CharSubclass", "Subclass")
                        .WithMany()
                        .HasForeignKey("SubclassId");

                    b.Navigation("CharClass");

                    b.Navigation("Race");

                    b.Navigation("Subclass");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterAttribute", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Characters.Character", "Character")
                        .WithMany("Attributes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterSavingThrow", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Characters.Character", "Character")
                        .WithMany("SavingThrows")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.CharacterSkill", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Characters.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UDMT.Domain.Entity.Shared.Skill", "Skill")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharClassSavingThrow", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Classes.CharClass", "CharClass")
                        .WithMany("SavingThrowProficiencies")
                        .HasForeignKey("CharClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharClass");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharSubclass", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Classes.CharClass", "CharClass")
                        .WithMany("Subclasses")
                        .HasForeignKey("CharClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharClass");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.ClassMechanic", b =>
                {
                    b.OwnsOne("UDMT.Domain.Entity.Mechanics.MechanicData", "Data", b1 =>
                        {
                            b1.Property<int>("ClassMechanicId")
                                .HasColumnType("int");

                            b1.Property<int?>("ActivationType")
                                .HasColumnType("int");

                            b1.PrimitiveCollection<string>("AddModifiers")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("Condition")
                                .HasColumnType("int");

                            b1.Property<int?>("DurationInRounds")
                                .HasColumnType("int");

                            b1.Property<int?>("GrantsSkillId")
                                .HasColumnType("int");

                            b1.Property<int?>("MaxUses")
                                .HasColumnType("int");

                            b1.Property<int?>("RelatedAttribute")
                                .HasColumnType("int");

                            b1.Property<int?>("RestType")
                                .HasColumnType("int");

                            b1.Property<int?>("Target")
                                .HasColumnType("int");

                            b1.HasKey("ClassMechanicId");

                            b1.HasIndex("GrantsSkillId");

                            b1.ToTable("ClassMechanics");

                            b1.WithOwner()
                                .HasForeignKey("ClassMechanicId");

                            b1.HasOne("UDMT.Domain.Entity.Classes.ClassSkill", "GrantsSkill")
                                .WithMany()
                                .HasForeignKey("GrantsSkillId");

                            b1.OwnsOne("UDMT.Domain.Entity.Mechanics.DamageFormula", "BonusDamage", b2 =>
                                {
                                    b2.Property<int>("MechanicDataClassMechanicId")
                                        .HasColumnType("int");

                                    b2.Property<int>("DiceCount")
                                        .HasColumnType("int");

                                    b2.Property<int>("DiceType")
                                        .HasColumnType("int");

                                    b2.Property<int>("FlatBonus")
                                        .HasColumnType("int");

                                    b2.Property<bool>("ScalesWithLevel")
                                        .HasColumnType("bit");

                                    b2.HasKey("MechanicDataClassMechanicId");

                                    b2.ToTable("DamageFormulas");

                                    b2.WithOwner()
                                        .HasForeignKey("MechanicDataClassMechanicId");
                                });

                            b1.Navigation("BonusDamage");

                            b1.Navigation("GrantsSkill");
                        });

                    b.Navigation("Data")
                        .IsRequired();
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.ClassSkill", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Classes.CharClass", "CharClass")
                        .WithMany("ClassSkills")
                        .HasForeignKey("CharClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UDMT.Domain.Entity.Shared.Skill", "Skill")
                        .WithMany("ClassSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharClass");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.Feature", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Classes.CharClass", "CharClass")
                        .WithMany("Features")
                        .HasForeignKey("CharClassId");

                    b.HasOne("UDMT.Domain.Entity.Classes.CharSubclass", "CharSubclass")
                        .WithMany("Features")
                        .HasForeignKey("CharSubclassId");

                    b.HasOne("UDMT.Domain.Entity.Classes.ClassMechanic", "ClassMechanic")
                        .WithMany()
                        .HasForeignKey("ClassMechanicId");

                    b.Navigation("CharClass");

                    b.Navigation("CharSubclass");

                    b.Navigation("ClassMechanic");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.RaceAttributeBonus", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Races.Race", "Race")
                        .WithMany("AttributeBonuses")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.RaceRelation", b =>
                {
                    b.HasOne("UDMT.Domain.Entity.Races.Race", "Race")
                        .WithMany("RaceRelations")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UDMT.Domain.Entity.Races.Race", "Subrace")
                        .WithMany()
                        .HasForeignKey("SubraceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Race");

                    b.Navigation("Subrace");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Characters.Character", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("SavingThrows");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharClass", b =>
                {
                    b.Navigation("ClassSkills");

                    b.Navigation("Features");

                    b.Navigation("SavingThrowProficiencies");

                    b.Navigation("Subclasses");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Classes.CharSubclass", b =>
                {
                    b.Navigation("Features");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Races.Race", b =>
                {
                    b.Navigation("AttributeBonuses");

                    b.Navigation("RaceRelations");
                });

            modelBuilder.Entity("UDMT.Domain.Entity.Shared.Skill", b =>
                {
                    b.Navigation("CharacterSkills");

                    b.Navigation("ClassSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
